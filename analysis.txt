* Analysis of the Problem
Some problems are present in Alpine Inc:
  1. The manual build and deployment process depends on a single individual which is Pete:
    - The process generates just one point of failure for the projects:
  2. Production Issues:
    - The application's number of bugs effects the user experience. This suggests that the code was not carefully tested all during the development process. 
    - These mistakes thereby raised the frequency of customer assistance calls. This might lead the support and development teams to be overloaded with load management and troubleshooting, therefore lowering team morale.

* Explain and Justify the Solution
Proposed Solution: CI Pipeline
  A continuous integration (CI) pipeline automates the build and test process.
  The reason why I chose this solution:
  -  Eliminating single point of failure, the standardized and automated CI pipeline reduces the dependence on any one person. 
  -  Early identification of errors produced by automated testing will help to reduce the production error count. When there is a moditification to any branch, GitHub Actions is set up to test the Notes Application immediately for issues.
  - The E2E tests confirmed that, seen from the user's perspective, the entire program runs as planned.

* Challenges Encountered While Building the CI Pipeline
  1. Locating `package.json` for Linting:
    - In the beginning of the progect, we faced difficulties in finding the correct location of the `package.json` file. There were two `package.json` files in our projectâ€”one in the `src/` folder and one outside.
  2. Broken Dependencies and Unmet Package Requirements:
    - The application have with broken dependencies and unmet package requirements.
  3. Artifact Packaging Confusion:
    - At first, there was some confusion around how to correctly package the artifact, leading to delays in the build process.
  4. Misplaced Unit Testing:
    - The first unit tests conducted in the wrong directory. We have to change it to fit us personally.
  5. Missing Build Script:
    - We first had no idea we should change the `package.json`, adding a build script to it.
  6. Playwright Installation:
    - We forgot to install the Playwright testing framework.
* Solutions
  1. Correcting the Path:
    -  We corrected the search for `package.json` by adding the `--prefix src`, therefore guaranteeing the proper directory is provided.
  2. Fixing Broken Dependencies:
    -  The command `sudo apt --fix-broken install` handled and corrected issues about unmet package needs and broken dependencies.
  3. Correct the Build Process:
    - We first added a step to install dependencies, followed by running the build artifact process.
  4. Specifying Unit Test Directory:
    - The `test-unit` command was also added with `--prefix src` argument to ensure that unit tests are conducted in the proper directory.
  5. Creating a Build Script:
    -  Developing a Build Script: One constructed and configured a build script inside `src/package.json`.
  6. Installing Playwright:
    - Install the Playwright Testing Framework with `npm install -D @playwright/test".
